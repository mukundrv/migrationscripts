{"paragraphs":[{"text":"val toDouble= udf[Double,String](_.toDouble)\nval dfg = spark.read.option(\"header\",\"true\").csv(\"s3://ag-mukund/cms/OP_DTL_GNRL_PGYR2017_P06292018.csv\")\nval dfo = spark.read.option(\"header\",\"true\").csv(\"s3://ag-mukund/cms/OP_DTL_OWNRSHP_PGYR2017_P06292018.csv\")\nval dfr = spark.read.option(\"header\",\"true\").csv(\"s3://ag-mukund/cms/OP_DTL_RSRCH_PGYR2017_P06292018.csv\")\n\ndfg.take(1)\nprintln(\"*******\")\ndfo.take(1)\nprintln(\"********\")\ndfr.take(1)\n\n","user":"anonymous","dateUpdated":"2018-10-03T14:14:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"toDouble: org.apache.spark.sql.expressions.UserDefinedFunction = UserDefinedFunction(<function1>,DoubleType,Some(List(StringType)))\ndfg: org.apache.spark.sql.DataFrame = [Change_Type: string, Covered_Recipient_Type: string ... 73 more fields]\ndfo: org.apache.spark.sql.DataFrame = [Change_Type: string, Physician_Profile_ID: string ... 27 more fields]\ndfr: org.apache.spark.sql.DataFrame = [Change_Type: string, Covered_Recipient_Type: string ... 174 more fields]\nres88: Array[org.apache.spark.sql.Row] = Array([NEW,Covered Recipient Physician,null,null,null,89784,GEORGE,null,AJJAN,null,870 PALISADE AVE,null,TEANECK,NJ,07666,United States,null,null,Doctor of Osteopathy,Allopathic & Osteopathic Physicians|General Practice,NJ,null,null,null,null,Mission Pharmacal Company,100000000186,Mission Pharmacal Company,TX,United States,14.54,06/05/2017,1,In-kind items and services,Food and Beverage,null,null,null,No,No Third Party Payment,null,null,null,null,No,421243971,No,Yes,Covered,Drug,ANTI-OSTEOPOROTIC,BINOSTO,0178-0101-02,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2017,06/29/2018])\n*******\nres90: Array[org.apache.spark.sql.Row] = Array([NEW,253727,J Antonio,null,Alarcon,null,2133 West Beverly Blvd,Suite 200,Montebello,CA,90640,United States,null,null,Medical Doctor,Allopathic & Osteopathic Physicians|Urology,428262821,2017,0.00,79961.50,Common Stock,UroGPO LLC,100000046250,UroGPO LLC,OH,United States,No,Physician Covered Recipient,06/29/2018])\n********\nres92: Array[org.apache.spark.sql.Row] = Array([NEW,Covered Recipient Physician,null,null,null,null,346085,JAMES,null,BAILEN,null,101 HOSPITAL BLVD,null,JEFFERSONVILLE,IN,47130,United States,null,null,Medical Doctor,Allopathic & Osteopathic Physicians|Urology,IN,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,Mission Pharma..."}]},"apps":[],"jobName":"paragraph_1538563375152_-476735689","id":"20181003-104255_2066299791","dateCreated":"2018-10-03T10:42:55+0000","dateStarted":"2018-10-03T14:14:09+0000","dateFinished":"2018-10-03T14:14:23+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:3760"},{"text":"val dfg_2 = dfg.withColumn(\"amount\",toDouble(dfg(\"Total_Amount_of_Payment_USDollars\")))\ndfg_2.createOrReplaceTempView(\"payments\")\ndfg_2.first\ndfg_2.printSchema","user":"anonymous","dateUpdated":"2018-10-03T14:15:22+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"dfg_2: org.apache.spark.sql.DataFrame = [Change_Type: string, Covered_Recipient_Type: string ... 74 more fields]\nres103: org.apache.spark.sql.Row = [NEW,Covered Recipient Physician,null,null,null,89784,GEORGE,null,AJJAN,null,870 PALISADE AVE,null,TEANECK,NJ,07666,United States,null,null,Doctor of Osteopathy,Allopathic & Osteopathic Physicians|General Practice,NJ,null,null,null,null,Mission Pharmacal Company,100000000186,Mission Pharmacal Company,TX,United States,14.54,06/05/2017,1,In-kind items and services,Food and Beverage,null,null,null,No,No Third Party Payment,null,null,null,null,No,421243971,No,Yes,Covered,Drug,ANTI-OSTEOPOROTIC,BINOSTO,0178-0101-02,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,null,2017,06/29/2018,14.54]\nroot\n |-- Change_Type: string (nullable = true)\n |-- Covered_Recipient_Type: string (nullable = true)\n |-- Teaching_Hospital_CCN: string (nullable = true)\n |-- Teaching_Hospital_ID: string (nullable = true)\n |-- Teaching_Hospital_Name: string (nullable = true)\n |-- Physician_Profile_ID: string (nullable = true)\n |-- Physician_First_Name: string (nullable = true)\n |-- Physician_Middle_Name: string (nullable = true)\n |-- Physician_Last_Name: string (nullable = true)\n |-- Physician_Name_Suffix: string (nullable = true)\n |-- Recipient_Primary_Business_Street_Address_Line1: string (nullable = true)\n |-- Recipient_Primary_Business_Street_Address_Line2: string (nullable = true)\n |-- Recipient_City: string (nullable = true)\n |-- Recipient_State: string (nullable = true)\n |-- Recipient_Zip_Code: string (nullable = true)\n |-- Recipient_Country: string (nullable = true)\n |-- Recipient_Province: string (nullable = true)\n |-- Recipient_Postal_Code: string (nullable = true)\n |-- Physician_Primary_Type: string (nullable = true)\n |-- Physician_Specialty: string (nullable = true)\n |-- Physician_License_State_code1: string (nullable = true)\n |-- Physician_License_State_code2: string (nullable = true)\n |-- Physician_License_State_code3: string (nullable = true)\n |-- Physician_License_State_code4: string (nullable = true)\n |-- Physician_License_State_code5: string (nullable = true)\n |-- Submitting_Applicable_Manufacturer_or_Applicable_GPO_Name: string (nullable = true)\n |-- Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_ID: string (nullable = true)\n |-- Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_Name: string (nullable = true)\n |-- Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_State: string (nullable = true)\n |-- Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_Country: string (nullable = true)\n |-- Total_Amount_of_Payment_USDollars: string (nullable = true)\n |-- Date_of_Payment: string (nullable = true)\n |-- Number_of_Payments_Included_in_Total_Amount: string (nullable = true)\n |-- Form_of_Payment_or_Transfer_of_Value: string (nullable = true)\n |-- Nature_of_Payment_or_Transfer_of_Value: string (nullable = true)\n |-- City_of_Travel: string (nullable = true)\n |-- State_of_Travel: string (nullable = true)\n |-- Country_of_Travel: string (nullable = true)\n |-- Physician_Ownership_Indicator: string (nullable = true)\n |-- Third_Party_Payment_Recipient_Indicator: string (nullable = true)\n |-- Name_of_Third_Party_Entity_Receiving_Payment_or_Transfer_of_Value: string (nullable = true)\n |-- Charity_Indicator: string (nullable = true)\n |-- Third_Party_Equals_Covered_Recipient_Indicator: string (nullable = true)\n |-- Contextual_Information: string (nullable = true)\n |-- Delay_in_Publication_Indicator: string (nullable = true)\n |-- Record_ID: string (nullable = true)\n |-- Dispute_Status_for_Publication: string (nullable = true)\n |-- Related_Product_Indicator: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_1: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_1: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_1: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_1: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_1: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_2: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_2: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_2: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_2: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_2: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_3: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_3: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_3: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_3: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_3: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_4: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_4: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_4: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_4: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_4: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_5: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_5: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_5: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_5: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_5: string (nullable = true)\n |-- Program_Year: string (nullable = true)\n |-- Payment_Publication_Date: string (nullable = true)\n |-- amount: double (nullable = false)\n\n"}]},"apps":[],"jobName":"paragraph_1538563438801_1335508251","id":"20181003-104358_699535710","dateCreated":"2018-10-03T10:43:58+0000","dateStarted":"2018-10-03T14:15:22+0000","dateFinished":"2018-10-03T14:15:29+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3761"},{"text":"%spark\ncase class Payment(physician_id:String, date_payment: String, record_id:String, payer:String, amount:Double, physician_speciality:String, nature_of_payment:String) extends Serializable\nimport org.apache.spark.sql._\nimport spark.implicits._\n\ndfg.printSchema\n\nval ds: Dataset[Payment] = spark.sql(\"select Physician_Profile_ID as physician_id, Date_of_Payment as date_payment, Record_ID as record_id, Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_Name as payer, amount, Physician_Specialty as physician_speciality , Nature_of_Payment_or_Transfer_of_Value as Nature_of_payment from payments where Physician_Profile_ID is not null\").as[Payment]\n\nds.cache\nds.take(100)\nds.createOrReplaceTempView(\"payments\")","user":"anonymous","dateUpdated":"2018-10-03T14:14:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"ERROR","msg":[{"type":"TEXT","data":"defined class Payment\nimport org.apache.spark.sql._\nimport spark.implicits._\nroot\n |-- Change_Type: string (nullable = true)\n |-- Covered_Recipient_Type: string (nullable = true)\n |-- Teaching_Hospital_CCN: string (nullable = true)\n |-- Teaching_Hospital_ID: string (nullable = true)\n |-- Teaching_Hospital_Name: string (nullable = true)\n |-- Physician_Profile_ID: string (nullable = true)\n |-- Physician_First_Name: string (nullable = true)\n |-- Physician_Middle_Name: string (nullable = true)\n |-- Physician_Last_Name: string (nullable = true)\n |-- Physician_Name_Suffix: string (nullable = true)\n |-- Recipient_Primary_Business_Street_Address_Line1: string (nullable = true)\n |-- Recipient_Primary_Business_Street_Address_Line2: string (nullable = true)\n |-- Recipient_City: string (nullable = true)\n |-- Recipient_State: string (nullable = true)\n |-- Recipient_Zip_Code: string (nullable = true)\n |-- Recipient_Country: string (nullable = true)\n |-- Recipient_Province: string (nullable = true)\n |-- Recipient_Postal_Code: string (nullable = true)\n |-- Physician_Primary_Type: string (nullable = true)\n |-- Physician_Specialty: string (nullable = true)\n |-- Physician_License_State_code1: string (nullable = true)\n |-- Physician_License_State_code2: string (nullable = true)\n |-- Physician_License_State_code3: string (nullable = true)\n |-- Physician_License_State_code4: string (nullable = true)\n |-- Physician_License_State_code5: string (nullable = true)\n |-- Submitting_Applicable_Manufacturer_or_Applicable_GPO_Name: string (nullable = true)\n |-- Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_ID: string (nullable = true)\n |-- Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_Name: string (nullable = true)\n |-- Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_State: string (nullable = true)\n |-- Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_Country: string (nullable = true)\n |-- Total_Amount_of_Payment_USDollars: string (nullable = true)\n |-- Date_of_Payment: string (nullable = true)\n |-- Number_of_Payments_Included_in_Total_Amount: string (nullable = true)\n |-- Form_of_Payment_or_Transfer_of_Value: string (nullable = true)\n |-- Nature_of_Payment_or_Transfer_of_Value: string (nullable = true)\n |-- City_of_Travel: string (nullable = true)\n |-- State_of_Travel: string (nullable = true)\n |-- Country_of_Travel: string (nullable = true)\n |-- Physician_Ownership_Indicator: string (nullable = true)\n |-- Third_Party_Payment_Recipient_Indicator: string (nullable = true)\n |-- Name_of_Third_Party_Entity_Receiving_Payment_or_Transfer_of_Value: string (nullable = true)\n |-- Charity_Indicator: string (nullable = true)\n |-- Third_Party_Equals_Covered_Recipient_Indicator: string (nullable = true)\n |-- Contextual_Information: string (nullable = true)\n |-- Delay_in_Publication_Indicator: string (nullable = true)\n |-- Record_ID: string (nullable = true)\n |-- Dispute_Status_for_Publication: string (nullable = true)\n |-- Related_Product_Indicator: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_1: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_1: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_1: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_1: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_1: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_2: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_2: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_2: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_2: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_2: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_3: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_3: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_3: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_3: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_3: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_4: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_4: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_4: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_4: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_4: string (nullable = true)\n |-- Covered_or_Noncovered_Indicator_5: string (nullable = true)\n |-- Indicate_Drug_or_Biological_or_Device_or_Medical_Supply_5: string (nullable = true)\n |-- Product_Category_or_Therapeutic_Area_5: string (nullable = true)\n |-- Name_of_Drug_or_Biological_or_Device_or_Medical_Supply_5: string (nullable = true)\n |-- Associated_Drug_or_Biological_NDC_5: string (nullable = true)\n |-- Program_Year: string (nullable = true)\n |-- Payment_Publication_Date: string (nullable = true)\n\norg.apache.spark.sql.AnalysisException: cannot resolve '`Physician_Profile_ID`' given input columns: [payments.physician_id, payments.amount, payments.physician_speciality, payments.date_payment, payments.Nature_of_payment, payments.record_id, payments.payer]; line 1 pos 308;\n'Project ['Physician_Profile_ID AS physician_id#5580, 'Date_of_Payment AS date_payment#5581, 'Record_ID AS record_id#5582, 'Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_Name AS payer#5583, 'amount, 'Physician_Specialty AS physician_speciality#5584, 'Nature_of_Payment_or_Transfer_of_Value AS Nature_of_payment#5585]\n+- 'Filter isnotnull('Physician_Profile_ID)\n   +- SubqueryAlias payments\n      +- Project [Physician_Profile_ID#3383 AS physician_id#4398, Date_of_Payment#3409 AS date_payment#4399, Record_ID#3423 AS record_id#4400, Applicable_Manufacturer_or_Applicable_GPO_Making_Payment_Name#3405 AS payer#4401, amount#4244, Physician_Specialty#3397 AS physician_speciality#4402, Nature_of_Payment_or_Transfer_of_Value#3412 AS Nature_of_payment#4403]\n         +- Filter isnotnull(Physician_Profile_ID#3383)\n            +- SubqueryAlias payments\n               +- Project [Change_Type#3378, Covered_Recipient_Type#3379, Teaching_Hospital_CCN#3380, Teaching_Hospital_ID#3381, Teaching_Hospital_Name#3382, Physician_Profile_ID#3383, Physician_First_Name#3384, Physician_Middle_Name#3385, Physician_Last_Name#3386, Physician_Name_Suffix#3387, Recipient_Primary_Business_Street_Address_Line1#3388, Recipient_Primary_Business_Street_Address_Line2#3389, Recipient_City#3390, Recipient_State#3391, Recipient_Zip_Code#3392, Recipient_Country#3393, Recipient_Province#3394, Recipient_Postal_Code#3395, Physician_Primary_Type#3396, Physician_Specialty#3397, Physician_License_State_code1#3398, Physician_License_State_code2#3399, Physician_License_State_code3#3400, Physician_License_State_code4#3401, ... 52 more fields]\n                  +- Relation[Change_Type#3378,Covered_Recipient_Type#3379,Teaching_Hospital_CCN#3380,Teaching_Hospital_ID#3381,Teaching_Hospital_Name#3382,Physician_Profile_ID#3383,Physician_First_Name#3384,Physician_Middle_Name#3385,Physician_Last_Name#3386,Physician_Name_Suffix#3387,Recipient_Primary_Business_Street_Address_Line1#3388,Recipient_Primary_Business_Street_Address_Line2#3389,Recipient_City#3390,Recipient_State#3391,Recipient_Zip_Code#3392,Recipient_Country#3393,Recipient_Province#3394,Recipient_Postal_Code#3395,Physician_Primary_Type#3396,Physician_Specialty#3397,Physician_License_State_code1#3398,Physician_License_State_code2#3399,Physician_License_State_code3#3400,Physician_License_State_code4#3401,... 51 more fields] csv\n\n  at org.apache.spark.sql.catalyst.analysis.package$AnalysisErrorAt.failAnalysis(package.scala:42)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:88)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1$$anonfun$apply$2.applyOrElse(CheckAnalysis.scala:85)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:289)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$transformUp$1.apply(TreeNode.scala:289)\n  at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:70)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:288)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:286)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$3.apply(TreeNode.scala:286)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$4.apply(TreeNode.scala:306)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:187)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.mapChildren(TreeNode.scala:304)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.transformUp(TreeNode.scala:286)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$transformExpressionsUp$1.apply(QueryPlan.scala:95)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$transformExpressionsUp$1.apply(QueryPlan.scala:95)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$1.apply(QueryPlan.scala:107)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$1.apply(QueryPlan.scala:107)\n  at org.apache.spark.sql.catalyst.trees.CurrentOrigin$.withOrigin(TreeNode.scala:70)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpression$1(QueryPlan.scala:106)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan.org$apache$spark$sql$catalyst$plans$QueryPlan$$recursiveTransform$1(QueryPlan.scala:118)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan$$anonfun$2.apply(QueryPlan.scala:127)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.mapProductIterator(TreeNode.scala:187)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan.mapExpressions(QueryPlan.scala:127)\n  at org.apache.spark.sql.catalyst.plans.QueryPlan.transformExpressionsUp(QueryPlan.scala:95)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:85)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$$anonfun$checkAnalysis$1.apply(CheckAnalysis.scala:80)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:127)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:126)\n  at org.apache.spark.sql.catalyst.trees.TreeNode$$anonfun$foreachUp$1.apply(TreeNode.scala:126)\n  at scala.collection.immutable.List.foreach(List.scala:381)\n  at org.apache.spark.sql.catalyst.trees.TreeNode.foreachUp(TreeNode.scala:126)\n  at org.apache.spark.sql.catalyst.analysis.CheckAnalysis$class.checkAnalysis(CheckAnalysis.scala:80)\n  at org.apache.spark.sql.catalyst.analysis.Analyzer.checkAnalysis(Analyzer.scala:92)\n  at org.apache.spark.sql.catalyst.analysis.Analyzer.executeAndCheck(Analyzer.scala:105)\n  at org.apache.spark.sql.execution.QueryExecution.analyzed$lzycompute(QueryExecution.scala:57)\n  at org.apache.spark.sql.execution.QueryExecution.analyzed(QueryExecution.scala:55)\n  at org.apache.spark.sql.execution.QueryExecution.assertAnalyzed(QueryExecution.scala:47)\n  at org.apache.spark.sql.Dataset$.ofRows(Dataset.scala:74)\n  at org.apache.spark.sql.SparkSession.sql(SparkSession.scala:641)\n  ... 102 elided\n"}]},"apps":[],"jobName":"paragraph_1538564139869_-337187854","id":"20181003-105539_651574835","dateCreated":"2018-10-03T10:55:39+0000","dateStarted":"2018-10-03T14:14:24+0000","dateFinished":"2018-10-03T14:14:26+0000","status":"ERROR","progressUpdateIntervalMs":500,"$$hashKey":"object:3762"},{"text":"sc.version","user":"anonymous","dateUpdated":"2018-10-03T14:14:09+0000","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"res96: String = 2.3.1\n"}]},"apps":[],"jobName":"paragraph_1538564913642_1546830632","id":"20181003-110833_754474636","dateCreated":"2018-10-03T11:08:33+0000","dateStarted":"2018-10-03T14:14:25+0000","dateFinished":"2018-10-03T14:14:27+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3763"},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1538565241684_-733512634","id":"20181003-111401_1789983812","dateCreated":"2018-10-03T11:14:01+0000","status":"FINISHED","progressUpdateIntervalMs":500,"$$hashKey":"object:3764","text":"ds.printSchema","dateUpdated":"2018-10-03T14:14:09+0000","dateFinished":"2018-10-03T14:14:27+0000","dateStarted":"2018-10-03T14:14:27+0000","results":{"code":"SUCCESS","msg":[{"type":"TEXT","data":"root\n |-- physician_id: string (nullable = true)\n |-- date_payment: string (nullable = true)\n |-- record_id: string (nullable = true)\n |-- payer: string (nullable = true)\n |-- amount: double (nullable = false)\n |-- physician_speciality: string (nullable = true)\n |-- Nature_of_payment: string (nullable = true)\n\n"}]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1538575090998_-232814598","id":"20181003-135810_2144118269","dateCreated":"2018-10-03T13:58:10+0000","status":"FINISHED","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4207","text":"//ds.filter($\"amount\" > 1000).groupBy(\"Nature_of_payment\").count().show()\n","dateUpdated":"2018-10-03T14:14:09+0000","dateFinished":"2018-10-03T14:14:27+0000","dateStarted":"2018-10-03T14:14:27+0000","results":{"code":"SUCCESS","msg":[]}},{"user":"anonymous","config":{"colWidth":12,"enabled":true,"results":{},"editorSetting":{"language":"scala","editOnDblClick":false},"editorMode":"ace/mode/scala"},"settings":{"params":{},"forms":{}},"apps":[],"jobName":"paragraph_1538575161528_1918609307","id":"20181003-135921_2053821571","dateCreated":"2018-10-03T13:59:21+0000","status":"READY","progressUpdateIntervalMs":500,"focus":true,"$$hashKey":"object:4308"}],"name":"CMS/Note1","id":"2DR2HSHJH","angularObjects":{"2BRWU4WXC:shared_process":[],"2AM1YV5CU:shared_process":[],"2AJXGMUUJ:shared_process":[],"2ANGGHHMQ:shared_process":[],"2AKK3QQXU:shared_process":[]},"config":{"looknfeel":"default","personalizedMode":"false"},"info":{}}